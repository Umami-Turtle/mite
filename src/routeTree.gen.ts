/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as MediaIndexImport } from './routes/media/index'
import { Route as ExtensionsIndexImport } from './routes/extensions/index'
import { Route as DocsIndexImport } from './routes/docs/index'
import { Route as MediaCopyArenaImport } from './routes/media/copy-arena'
import { Route as ExtensionsInstalledImport } from './routes/extensions/installed'
import { Route as ExtensionsBrowseImport } from './routes/extensions/browse'
import { Route as DocsTutorialsImport } from './routes/docs/tutorials'
import { Route as DocsIntroImport } from './routes/docs/intro'
import { Route as DocsGetStartedImport } from './routes/docs/get-started'
import { Route as DocsChangeLogsImport } from './routes/docs/change-logs'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const MediaIndexRoute = MediaIndexImport.update({
  id: '/media/',
  path: '/media/',
  getParentRoute: () => rootRoute,
} as any)

const ExtensionsIndexRoute = ExtensionsIndexImport.update({
  id: '/extensions/',
  path: '/extensions/',
  getParentRoute: () => rootRoute,
} as any)

const DocsIndexRoute = DocsIndexImport.update({
  id: '/docs/',
  path: '/docs/',
  getParentRoute: () => rootRoute,
} as any)

const MediaCopyArenaRoute = MediaCopyArenaImport.update({
  id: '/media/copy-arena',
  path: '/media/copy-arena',
  getParentRoute: () => rootRoute,
} as any)

const ExtensionsInstalledRoute = ExtensionsInstalledImport.update({
  id: '/extensions/installed',
  path: '/extensions/installed',
  getParentRoute: () => rootRoute,
} as any)

const ExtensionsBrowseRoute = ExtensionsBrowseImport.update({
  id: '/extensions/browse',
  path: '/extensions/browse',
  getParentRoute: () => rootRoute,
} as any)

const DocsTutorialsRoute = DocsTutorialsImport.update({
  id: '/docs/tutorials',
  path: '/docs/tutorials',
  getParentRoute: () => rootRoute,
} as any)

const DocsIntroRoute = DocsIntroImport.update({
  id: '/docs/intro',
  path: '/docs/intro',
  getParentRoute: () => rootRoute,
} as any)

const DocsGetStartedRoute = DocsGetStartedImport.update({
  id: '/docs/get-started',
  path: '/docs/get-started',
  getParentRoute: () => rootRoute,
} as any)

const DocsChangeLogsRoute = DocsChangeLogsImport.update({
  id: '/docs/change-logs',
  path: '/docs/change-logs',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/docs/change-logs': {
      id: '/docs/change-logs'
      path: '/docs/change-logs'
      fullPath: '/docs/change-logs'
      preLoaderRoute: typeof DocsChangeLogsImport
      parentRoute: typeof rootRoute
    }
    '/docs/get-started': {
      id: '/docs/get-started'
      path: '/docs/get-started'
      fullPath: '/docs/get-started'
      preLoaderRoute: typeof DocsGetStartedImport
      parentRoute: typeof rootRoute
    }
    '/docs/intro': {
      id: '/docs/intro'
      path: '/docs/intro'
      fullPath: '/docs/intro'
      preLoaderRoute: typeof DocsIntroImport
      parentRoute: typeof rootRoute
    }
    '/docs/tutorials': {
      id: '/docs/tutorials'
      path: '/docs/tutorials'
      fullPath: '/docs/tutorials'
      preLoaderRoute: typeof DocsTutorialsImport
      parentRoute: typeof rootRoute
    }
    '/extensions/browse': {
      id: '/extensions/browse'
      path: '/extensions/browse'
      fullPath: '/extensions/browse'
      preLoaderRoute: typeof ExtensionsBrowseImport
      parentRoute: typeof rootRoute
    }
    '/extensions/installed': {
      id: '/extensions/installed'
      path: '/extensions/installed'
      fullPath: '/extensions/installed'
      preLoaderRoute: typeof ExtensionsInstalledImport
      parentRoute: typeof rootRoute
    }
    '/media/copy-arena': {
      id: '/media/copy-arena'
      path: '/media/copy-arena'
      fullPath: '/media/copy-arena'
      preLoaderRoute: typeof MediaCopyArenaImport
      parentRoute: typeof rootRoute
    }
    '/docs/': {
      id: '/docs/'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsIndexImport
      parentRoute: typeof rootRoute
    }
    '/extensions/': {
      id: '/extensions/'
      path: '/extensions'
      fullPath: '/extensions'
      preLoaderRoute: typeof ExtensionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/media/': {
      id: '/media/'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof MediaIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docs/change-logs': typeof DocsChangeLogsRoute
  '/docs/get-started': typeof DocsGetStartedRoute
  '/docs/intro': typeof DocsIntroRoute
  '/docs/tutorials': typeof DocsTutorialsRoute
  '/extensions/browse': typeof ExtensionsBrowseRoute
  '/extensions/installed': typeof ExtensionsInstalledRoute
  '/media/copy-arena': typeof MediaCopyArenaRoute
  '/docs': typeof DocsIndexRoute
  '/extensions': typeof ExtensionsIndexRoute
  '/media': typeof MediaIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docs/change-logs': typeof DocsChangeLogsRoute
  '/docs/get-started': typeof DocsGetStartedRoute
  '/docs/intro': typeof DocsIntroRoute
  '/docs/tutorials': typeof DocsTutorialsRoute
  '/extensions/browse': typeof ExtensionsBrowseRoute
  '/extensions/installed': typeof ExtensionsInstalledRoute
  '/media/copy-arena': typeof MediaCopyArenaRoute
  '/docs': typeof DocsIndexRoute
  '/extensions': typeof ExtensionsIndexRoute
  '/media': typeof MediaIndexRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/docs/change-logs': typeof DocsChangeLogsRoute
  '/docs/get-started': typeof DocsGetStartedRoute
  '/docs/intro': typeof DocsIntroRoute
  '/docs/tutorials': typeof DocsTutorialsRoute
  '/extensions/browse': typeof ExtensionsBrowseRoute
  '/extensions/installed': typeof ExtensionsInstalledRoute
  '/media/copy-arena': typeof MediaCopyArenaRoute
  '/docs/': typeof DocsIndexRoute
  '/extensions/': typeof ExtensionsIndexRoute
  '/media/': typeof MediaIndexRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docs/change-logs'
    | '/docs/get-started'
    | '/docs/intro'
    | '/docs/tutorials'
    | '/extensions/browse'
    | '/extensions/installed'
    | '/media/copy-arena'
    | '/docs'
    | '/extensions'
    | '/media'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docs/change-logs'
    | '/docs/get-started'
    | '/docs/intro'
    | '/docs/tutorials'
    | '/extensions/browse'
    | '/extensions/installed'
    | '/media/copy-arena'
    | '/docs'
    | '/extensions'
    | '/media'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/docs/change-logs'
    | '/docs/get-started'
    | '/docs/intro'
    | '/docs/tutorials'
    | '/extensions/browse'
    | '/extensions/installed'
    | '/media/copy-arena'
    | '/docs/'
    | '/extensions/'
    | '/media/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocsChangeLogsRoute: typeof DocsChangeLogsRoute
  DocsGetStartedRoute: typeof DocsGetStartedRoute
  DocsIntroRoute: typeof DocsIntroRoute
  DocsTutorialsRoute: typeof DocsTutorialsRoute
  ExtensionsBrowseRoute: typeof ExtensionsBrowseRoute
  ExtensionsInstalledRoute: typeof ExtensionsInstalledRoute
  MediaCopyArenaRoute: typeof MediaCopyArenaRoute
  DocsIndexRoute: typeof DocsIndexRoute
  ExtensionsIndexRoute: typeof ExtensionsIndexRoute
  MediaIndexRoute: typeof MediaIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocsChangeLogsRoute: DocsChangeLogsRoute,
  DocsGetStartedRoute: DocsGetStartedRoute,
  DocsIntroRoute: DocsIntroRoute,
  DocsTutorialsRoute: DocsTutorialsRoute,
  ExtensionsBrowseRoute: ExtensionsBrowseRoute,
  ExtensionsInstalledRoute: ExtensionsInstalledRoute,
  MediaCopyArenaRoute: MediaCopyArenaRoute,
  DocsIndexRoute: DocsIndexRoute,
  ExtensionsIndexRoute: ExtensionsIndexRoute,
  MediaIndexRoute: MediaIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/docs/change-logs",
        "/docs/get-started",
        "/docs/intro",
        "/docs/tutorials",
        "/extensions/browse",
        "/extensions/installed",
        "/media/copy-arena",
        "/docs/",
        "/extensions/",
        "/media/",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/docs/change-logs": {
      "filePath": "docs/change-logs.tsx"
    },
    "/docs/get-started": {
      "filePath": "docs/get-started.tsx"
    },
    "/docs/intro": {
      "filePath": "docs/intro.tsx"
    },
    "/docs/tutorials": {
      "filePath": "docs/tutorials.tsx"
    },
    "/extensions/browse": {
      "filePath": "extensions/browse.tsx"
    },
    "/extensions/installed": {
      "filePath": "extensions/installed.tsx"
    },
    "/media/copy-arena": {
      "filePath": "media/copy-arena.tsx"
    },
    "/docs/": {
      "filePath": "docs/index.tsx"
    },
    "/extensions/": {
      "filePath": "extensions/index.tsx"
    },
    "/media/": {
      "filePath": "media/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
